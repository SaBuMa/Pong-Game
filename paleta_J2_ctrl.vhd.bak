--***********************************************************--
--        	PONTIFICIA UNIVERSIDAD JAVERIANA	             	 --
--        		DISEÑO EN FPGA						                --
--                   													 --
-- Nombres: Santiago Burgos									       --
-- Título: 												 --
-- Fecha: 16/02/2021                 								 --
--                                                           --
--***********************************************************--

--Este bloque se encarga de realizar el control de señales --> Maquina de estados

--***********************************************************--
--DEFINICIÓN DE LAS LIBRERÍAS 
--***********************************************************--
Library IEEE;
USE ieee.std_logic_1164.all;
USE IEEE.NUMERIC_STD.ALL;
--***********************************************************--
--DEFINICION DEl ENTITY = ENTRADAS Y SALIDAS
--***********************************************************--
ENTITY paleta_J2_ctrl IS
	PORT(		
		clk 							: IN STD_LOGIC;
		rst							: IN STD_LOGIC;
		max_tick_debouncer		: IN STD_LOGIC;
		up								: IN STD_LOGIC;
		maxtickTres_ctrl			: IN STD_LOGIC;
		ena_debouncer				: OUT STD_LOGIC;
		syn_clr_debouncer			: OUT STD_LOGIC;
		ledFPGA 						: OUT STD_LOGIC;
		led 							: OUT STD_LOGIC;
		ena_timer_Tres_ctrl		: OUT STD_LOGIC;
		sclr_timer_Tres_ctrl		: OUT STD_LOGIC

);
END ENTITY paleta_J2_ctrl;
--***********************************************************--
--DEFINICION DE SEÑALES AUXILIARES
--***********************************************************--
ARCHITECTURE functional OF paleta_J2_ctrl IS
	TYPE state IS (s0, s1 , s2);
	SIGNAL estado_actual, siguiente_estado : state;
	SIGNAL estado_led : STD_LOGIC;
	SIGNAL estado_led_next : STD_LOGIC :='0';
	
--***********************************************************--
--DECLARACION LOGICA							   						 --
--***********************************************************--
BEGIN

led	<=	estado_led;
ledFPGA	<=	estado_led;

Sequencial:PROCESS (rst, clk)
	
	BEGIN 
		IF (rst = '1') THEN
			estado_actual<= s0;
			estado_led	<=	'0';
		ELSIF (rising_edge(clk)) THEN
			estado_actual <= siguiente_estado;
			estado_led	<=	estado_led_next;
		END IF;
	END PROCESS Sequencial;
	
Combinacional:PROCESS (estado_actual, max_tick_debouncer, up,  estado_led, maxtickTres_ctrl)

	BEGIN
		
		CASE estado_actual IS
		
			WHEN s0	=>--Estado inicial en donde se espera a que se oprima un boton
				ena_debouncer			<='0';
				syn_clr_debouncer		<='1';
				sclr_timer_Tres_ctrl	<='1';
				ena_timer_Tres_ctrl	<='0';
				estado_led_next 		<=	estado_led;
				
				IF (up = '1') THEN
					siguiente_estado<= s0;
				ELSIF (up ='0') THEN
					siguiente_estado <= s1;
				END IF;
				
			WHEN s1 	=>--Estado en donde se realiza el conteo de 1.6ms 
				syn_clr_debouncer		<='0'; 
				sclr_timer_Tres_ctrl	<='0';
				ena_timer_Tres_ctrl	<= '0';
				ena_debouncer			<='1';
				estado_led_next 		<=	estado_led;
					IF (max_tick_debouncer = '1') THEN
 						IF(up ='0') THEN
							siguiente_estado <= s2;
						ELSE
							siguiente_estado	<= s0;
						END IF;
					ELSIF (max_tick_debouncer = '0')THEN
						siguiente_estado<=s1;
					END IF;
				
			WHEN s2 	=>--Estado en donde se lleva la cuenta de cuantos 1.6ms han pasado para asi confirmar si el boton ha sido oprimido y asi encender o apagar el led
				ena_debouncer			<='0';
				ena_timer_Tres_ctrl	<='1';
				syn_clr_debouncer		<='1';
				sclr_timer_Tres_ctrl	<='0';
				IF (maxtickTres_ctrl='1')THEN
				
					IF (up='1') THEN
					
						IF (estado_led='0') THEN
							siguiente_estado<=s0;
							estado_led_next	<='1';
						ELSIF (estado_led='1') THEN
							estado_led_next	<='0';
							siguiente_estado<=s0;
						END IF;
						
					ELSE
						siguiente_estado<=s2;
					END IF;	
					
				ELSE
					siguiente_estado<=s1;
				END IF;			
		END CASE;
		
	END PROCESS Combinacional;

END ARCHITECTURE functional;